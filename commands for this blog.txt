python -m venv venv   // to create the virtual environment files.
.\venv\Scripts\Activate.ps1    //  In windows we use this command to activate the virtual environment (If is not letting activate it use in PowerShell admin mode this command "Set-ExecutionPolicy Unrestricted" and when it prompts type "Y").  "source venv/bin/activate" in other systems like Linux and Mac Os use this command to activate the virtual environment.
(venv) % pip install "flask<2"  //  This is to install flask in the virtual environment.
set FLASK_APP=microblog.py  // Is to tell the Venv that the FLASK_APP is going to run from the file microblog.py. In Linux use the command "export FLASK_APP=microblog.py"
flask run // This is to run the flask app
pip install python-dotenv  // Since environment variables aren't remembered across terminal sessions, you may find tedious to always have to set the FLASK_APP environment variable when you open a new terminal window. Starting with version 1.0, Flask allows you to register environment variables that you want to be automatically imported when you run the flask command. To use this option you have to install the python-dotenv package. 
Then you can just write the environment variable name and value in a file named .flaskenv located in the top-level directory of the project:  "FLASK_APP=microblog.py"
pip install flask-wtf  // Installs the WTForms Components from flask

pip install flask-sqlalchemy  // This will install the flask-sqlalchemy component.
pip install flask-migrate  // This will help to migrate or modify the DB when needed. Flask-Migrate is an extension that handles SQLAlchemy database migrations for Flask applications using Alembic. The database operations are provided as command-line arguments under the flask db command.  See documentation: https://github.com/miguelgrinberg/flask-migrate

flask db init    //  This will create a database migration repository and when we need to migrate or modify the database, it will not delete all the existing data.
flask db migrate -m "users table"  //  This will migrate the database to the repository folder and create like a backup to compare the tables and update the new one. More info in: https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-iv-database   //  It also has a upgrade() and downgrade() method in case you want to revert the changes. The flask db migrate command does not make any changes to the database, it just generates the migration script. To apply the changes to the database, the flask db upgrade command must be used.
flask db upgrade  //  To apply the changes to the database, the flask db upgrade command must be used.

TO UPGRADE CHANGES TO THE DATABASE, Run the following command:
flask db migrate -m "posts table"  //  Since I have updates to the application models, a new database migration needs to be generated. This will report what the changes will be. The "-m" is the message that we want to store.
flask db upgrade   // And the migration needs to be applied to the database. This will upgrade the database repository and the DB with the new changes.

pip install flask-login  //  Installs the flask-login module 
pip install email-validator  // Installs the email-validator module
